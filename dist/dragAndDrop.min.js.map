{"version":3,"file":"dragAndDrop.min.js","mappings":"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","sources":["webpack://draganddrop/./src/dragAndDrop.ts","webpack://draganddrop/webpack/startup"],"sourcesContent":["const defaultDraggingClass = \"dragging-item\";\n\nabstract class BaseDragAndDrop {\n  static overActiveDragAndDropBox: HTMLElement | null = null;\n  static draggingItem: HTMLElement | null = null;\n  static initialStartDnDList: HTMLElement | null = null;\n  static lastTouchMoveElement: HTMLElement | null = null;\n  static touchDnDPreview: HTMLElement | null = null;\n  static draggingClassMap: Map<HTMLElement, string> = new Map();\n  static onDragStartMap: Map<HTMLElement, Function> = new Map();\n  static onDragOverMap: Map<HTMLElement, Function> = new Map();\n  static onDragEndMap: Map<HTMLElement, Function> = new Map();\n}\n\ninterface DnD {\n  init: () => void;\n  dragStartHandler: (element: HTMLElement) => void;\n  dragOverHandler: (e: DragEvent | TouchEvent) => void;\n  dragEndHandler: (e: DragEvent | TouchEvent, element: HTMLElement) => void;\n  dragEnterHandler: (e: DragEvent | TouchEvent) => void;\n  touchStartHandler: (e: TouchEvent, element: HTMLElement) => void;\n  touchMoveHandler: (e: TouchEvent) => void;\n  touchEndHandler: (e: TouchEvent, element: HTMLElement) => void;\n}\n\nclass DragAndDrop extends BaseDragAndDrop implements DnD {\n  private dragAndDropList: HTMLElement;\n  private isInit: boolean;\n  private dragAndDropItems: HTMLElement[];\n  private isRemoveItemLogic: boolean;\n  private allowDnDFromClasses: string[];\n\n  constructor(\n    dragAndDropList: HTMLElement,\n    draggingClass: string,\n    removeItem: boolean,\n    allowDnDFromClasses: string[],\n    onDragStart: (e?: DragEvent) => void,\n    onDragOver: (e?: DragEvent) => void,\n    onDragEnd: (e?: DragEvent) => void\n  ) {\n    super();\n    this.dragAndDropList = dragAndDropList;\n    this.isInit = false;\n    this.dragAndDropItems = Array.from(\n      this.dragAndDropList.children\n    ) as HTMLElement[];\n    this.allowDnDFromClasses = allowDnDFromClasses;\n    this.isRemoveItemLogic = removeItem;\n    DragAndDrop.draggingClassMap.set(dragAndDropList, draggingClass);\n    DragAndDrop.onDragStartMap.set(dragAndDropList, onDragStart);\n    DragAndDrop.onDragOverMap.set(dragAndDropList, onDragOver);\n    DragAndDrop.onDragEndMap.set(dragAndDropList, onDragEnd);\n  }\n\n  init() {\n    if (!this.isInit) {\n      this.isInit = true;\n      this.dragAndDropItems.forEach((dndItem) => {\n        dndItem.setAttribute(\"draggable\", \"true\");\n        dndItem.addEventListener(\"dragstart\", () =>\n          this.dragStartHandler(dndItem)\n        );\n        dndItem.addEventListener(\"touchstart\", (e: TouchEvent) => {\n          this.touchStartHandler(e, dndItem);\n        });\n        dndItem.addEventListener(\"dragover\", (e: DragEvent) =>\n          this.dragOverHandler(e)\n        );\n        dndItem.addEventListener(\"touchmove\", (e: TouchEvent) =>\n          this.dragOverHandler(e)\n        );\n        dndItem.addEventListener(\"dragend\", (e: DragEvent) =>\n          this.dragEndHandler(e, dndItem)\n        );\n        dndItem.addEventListener(\"touchend\", (e: TouchEvent) => {\n          this.touchEndHandler(e, dndItem);\n        });\n      });\n      this.dragAndDropList.addEventListener(\"dragenter\", (e: DragEvent) =>\n        this.dragEnterHandler(e)\n      );\n      this.dragAndDropList.addEventListener(\"dragover\", (e: DragEvent) =>\n        this.dragOverHandler(e)\n      );\n      this.dragAndDropList.addEventListener(\"touchmove\", (e: TouchEvent) =>\n        this.dragOverHandler(e)\n      );\n      document.addEventListener(\"touchmove\", (e: TouchEvent) =>\n        this.touchMoveHandler(e)\n      );\n    }\n  }\n\n  dragStartHandler(item: HTMLElement) {\n    DragAndDrop.draggingItem = item;\n    if (item.parentElement) {\n      const draggingClass = DragAndDrop.draggingClassMap.get(\n        item.parentElement\n      );\n      if (draggingClass) {\n        item.classList.add(draggingClass);\n      }\n    }\n    if (this.dragAndDropList.contains(item)) {\n      DragAndDrop.initialStartDnDList = this.dragAndDropList;\n      DragAndDrop.overActiveDragAndDropBox = this.dragAndDropList;\n    }\n    if (item.parentElement) {\n      const onDragStartFunc = DragAndDrop.onDragStartMap.get(\n        item.parentElement\n      );\n      if (onDragStartFunc) {\n        onDragStartFunc();\n      }\n    }\n  }\n\n  touchStartHandler(e: TouchEvent, item: HTMLElement) {\n    DragAndDrop.touchDnDPreview = item.cloneNode(true) as HTMLElement;\n    if (DragAndDrop.touchDnDPreview.getAttribute(\"id\")) {\n      DragAndDrop.touchDnDPreview.setAttribute(\"id\", \"\");\n    }\n    if (DragAndDrop.touchDnDPreview.getAttribute(\"name\")) {\n      DragAndDrop.touchDnDPreview.setAttribute(\"name\", \"\");\n    }\n    DragAndDrop.touchDnDPreview.style.position = \"fixed\";\n    DragAndDrop.touchDnDPreview.style.pointerEvents = \"none\";\n    DragAndDrop.touchDnDPreview.style.zIndex = \"10000\";\n    DragAndDrop.touchDnDPreview.style.transition = \"none\";\n    DragAndDrop.touchDnDPreview.style.left = `${e.touches[0].clientX}px`;\n    DragAndDrop.touchDnDPreview.style.top = `${e.touches[0].clientY}px`;\n    document.body.appendChild(DragAndDrop.touchDnDPreview);\n    this.dragStartHandler(item);\n  }\n\n  dragOverHandler(e: DragEvent | TouchEvent) {\n    e.preventDefault();\n    let eventClientY: number;\n    if (\"changedTouches\" in e) {\n      eventClientY = e.changedTouches[0].clientY;\n    } else {\n      eventClientY = e.clientY;\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = \"move\";\n      }\n    }\n    let activeDndSelector = this.dragAndDropList;\n    if (DragAndDrop.overActiveDragAndDropBox) {\n      activeDndSelector = DragAndDrop.overActiveDragAndDropBox;\n    }\n    const dndItems = Array.from(activeDndSelector.children) as HTMLElement[];\n    const notDraggingItems = dndItems.filter(\n      (item) => item !== DragAndDrop.draggingItem\n    ) as HTMLElement[];\n    const nextItem = notDraggingItems.find((item) => {\n      const notDraggingItemRect = item.getBoundingClientRect();\n      return (\n        eventClientY <= notDraggingItemRect.top + notDraggingItemRect.height / 2\n      );\n    }) as Node;\n    if (\n      activeDndSelector &&\n      DragAndDrop.draggingItem &&\n      !DragAndDrop.draggingItem.contains(activeDndSelector)\n    ) {\n      activeDndSelector.insertBefore(DragAndDrop.draggingItem, nextItem);\n    }\n    if (DragAndDrop.draggingItem && DragAndDrop.draggingItem.parentElement) {\n      const onDragOverFunc = DragAndDrop.onDragOverMap.get(\n        DragAndDrop.draggingItem.parentElement\n      );\n      if (onDragOverFunc) {\n        onDragOverFunc();\n      }\n    }\n  }\n\n  touchMoveHandler(e: TouchEvent) {\n    const eventClientX = e.touches[0].clientX;\n    const eventClientY = e.touches[0].clientY;\n    if (DragAndDrop.touchDnDPreview) {\n      DragAndDrop.touchDnDPreview.style.left = `${eventClientX}px`;\n      DragAndDrop.touchDnDPreview.style.top = `${eventClientY}px`;\n    }\n    const currentMoveElement = document.elementFromPoint(\n      eventClientX,\n      eventClientY\n    ) as HTMLElement;\n    if (\n      currentMoveElement &&\n      currentMoveElement === this.dragAndDropList &&\n      DragAndDrop.lastTouchMoveElement !== currentMoveElement\n    ) {\n      this.dragEnterHandler(e);\n      DragAndDrop.lastTouchMoveElement = currentMoveElement;\n      return;\n    }\n    DragAndDrop.lastTouchMoveElement = null;\n  }\n\n  dragEndHandler(e: DragEvent | TouchEvent, item: HTMLElement) {\n    if (\n      this.isRemoveItemLogic &&\n      DragAndDrop.overActiveDragAndDropBox === this.dragAndDropList\n    ) {\n      const dragAndDropListRect =\n        DragAndDrop.overActiveDragAndDropBox.getBoundingClientRect();\n      let eventClientX: number;\n      let eventClientY: number;\n      if (\"changedTouches\" in e) {\n        eventClientX = e.changedTouches[0].clientX;\n        eventClientY = e.changedTouches[0].clientY;\n      } else {\n        eventClientX = e.clientX;\n        eventClientY = e.clientY;\n      }\n      if (\n        eventClientY < dragAndDropListRect.top ||\n        eventClientY > dragAndDropListRect.top + dragAndDropListRect.height ||\n        eventClientX < dragAndDropListRect.left ||\n        eventClientX > dragAndDropListRect.left + dragAndDropListRect.width\n      ) {\n        item.parentNode?.removeChild(item);\n      }\n    }\n    if (item.parentElement) {\n      const parentDraggingClass = DragAndDrop.draggingClassMap.get(\n        item.parentElement\n      );\n      if (parentDraggingClass) {\n        item.classList.remove(parentDraggingClass);\n      }\n    }\n    const dndListDraggingClass = DragAndDrop.draggingClassMap.get(\n      this.dragAndDropList\n    );\n    if (dndListDraggingClass) {\n      item.classList.remove(dndListDraggingClass);\n    }\n    DragAndDrop.draggingItem = null;\n    DragAndDrop.initialStartDnDList = null;\n    if (item.parentElement) {\n      const onDragEndFunc = DragAndDrop.onDragEndMap.get(item.parentElement);\n      if (onDragEndFunc) {\n        onDragEndFunc();\n      }\n    }\n  }\n\n  touchEndHandler(e: TouchEvent, item: HTMLElement) {\n    if (DragAndDrop.touchDnDPreview) {\n      DragAndDrop.touchDnDPreview.remove();\n      DragAndDrop.touchDnDPreview = null;\n    }\n    this.dragEndHandler(e, item);\n  }\n\n  dragEnterHandler(e: DragEvent | TouchEvent) {\n    let eventCurrentTarget: EventTarget | null;\n    if (\"touches\" in e) {\n      eventCurrentTarget = document.elementFromPoint(\n        e.touches[0].clientX,\n        e.touches[0].clientY\n      );\n    } else {\n      eventCurrentTarget = e.currentTarget;\n    }\n    let allowAssignDnDBox = false;\n    for (const allowDndElem of this.allowDnDFromClasses) {\n      if (\n        DragAndDrop.overActiveDragAndDropBox?.classList.contains(allowDndElem)\n      ) {\n        allowAssignDnDBox = true;\n        break;\n      }\n    }\n    let isInitDnDList = false;\n    if (DragAndDrop.initialStartDnDList) {\n      isInitDnDList = true;\n      for (const initDnDListClass of Array.from(\n        DragAndDrop.initialStartDnDList.classList\n      )) {\n        if (\n          !(eventCurrentTarget as HTMLElement)?.classList.contains(\n            initDnDListClass\n          )\n        ) {\n          isInitDnDList = false;\n          break;\n        }\n      }\n    }\n    if (!allowAssignDnDBox && !isInitDnDList) {\n      return;\n    }\n    if (DragAndDrop.overActiveDragAndDropBox) {\n      const overActiveDnDBoxDraggingClass = DragAndDrop.draggingClassMap.get(\n        DragAndDrop.overActiveDragAndDropBox\n      );\n      if (overActiveDnDBoxDraggingClass) {\n        DragAndDrop.draggingItem?.classList.remove(\n          overActiveDnDBoxDraggingClass\n        );\n      }\n    }\n    DragAndDrop.overActiveDragAndDropBox = <HTMLElement>eventCurrentTarget;\n    if (DragAndDrop.overActiveDragAndDropBox) {\n      const overActiveDnDBoxDraggingClass = DragAndDrop.draggingClassMap.get(\n        DragAndDrop.overActiveDragAndDropBox\n      );\n      if (overActiveDnDBoxDraggingClass) {\n        DragAndDrop.draggingItem?.classList.add(overActiveDnDBoxDraggingClass);\n      }\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElement {\n    dragAndDrop(settings?: {\n      draggingClass?: string;\n      removeItem?: boolean;\n      allowDnDFromClasses?: string | string[];\n      onDragStart?: (e?: DragEvent) => void;\n      onDragOver?: (e?: DragEvent) => void;\n      onDragEnd?: (e?: DragEvent) => void;\n    }): void;\n  }\n}\n\nHTMLElement.prototype.dragAndDrop = function (settings) {\n  const settingsToSet = {\n    draggingClass: settings?.draggingClass\n      ? settings.draggingClass\n      : defaultDraggingClass,\n    removeItem: settings?.removeItem ? settings.removeItem : false,\n    allowDnDFromClasses: settings?.allowDnDFromClasses\n      ? Array.isArray(settings.allowDnDFromClasses)\n        ? [...settings.allowDnDFromClasses]\n        : [settings.allowDnDFromClasses]\n      : [],\n    onDragStart: settings?.onDragStart ? settings.onDragStart : () => {},\n    onDragOver: settings?.onDragOver ? settings.onDragOver : () => {},\n    onDragEnd: settings?.onDragEnd ? settings.onDragEnd : () => {},\n  };\n  const dragAndDrop = new DragAndDrop(\n    this,\n    settingsToSet.draggingClass,\n    settingsToSet.removeItem,\n    settingsToSet.allowDnDFromClasses,\n    settingsToSet.onDragStart,\n    settingsToSet.onDragOver,\n    settingsToSet.onDragEnd\n  );\n  dragAndDrop.init();\n};\n\nexport {};\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[410](0, __webpack_exports__);\n"],"names":["dragAndDropList","draggingClass","removeItem","allowDnDFromClasses","onDragStart","onDragOver","onDragEnd","isInit","dragAndDropItems","Array","from","children","isRemoveItemLogic","DragAndDrop","draggingClassMap","set","onDragStartMap","onDragOverMap","onDragEndMap","init","this","forEach","dndItem","setAttribute","addEventListener","dragStartHandler","e","touchStartHandler","dragOverHandler","dragEndHandler","touchEndHandler","dragEnterHandler","document","touchMoveHandler","item","draggingItem","parentElement","get","classList","add","contains","initialStartDnDList","overActiveDragAndDropBox","onDragStartFunc","touchDnDPreview","cloneNode","getAttribute","style","position","pointerEvents","zIndex","transition","left","touches","clientX","top","clientY","body","appendChild","eventClientY","preventDefault","changedTouches","dataTransfer","dropEffect","activeDndSelector","nextItem","filter","find","notDraggingItemRect","getBoundingClientRect","height","insertBefore","onDragOverFunc","eventClientX","currentMoveElement","elementFromPoint","lastTouchMoveElement","dragAndDropListRect","width","parentNode","removeChild","parentDraggingClass","remove","dndListDraggingClass","onDragEndFunc","eventCurrentTarget","currentTarget","allowAssignDnDBox","allowDndElem","overActiveDnDBoxDraggingClass","isInitDnDList","initDnDListClass","Map","HTMLElement","prototype","dragAndDrop","settings","settingsToSet","isArray"],"sourceRoot":""}